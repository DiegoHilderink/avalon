------------------------------
-- Archivo de base de datos --
------------------------------



DROP TABLE IF EXISTS usuarios CASCADE;                          -- B C I
DROP TABLE IF EXISTS empresas CASCADE;                          -- B C I
DROP TABLE IF EXISTS listaCapitulos CASCADE;                    -- B C I
DROP TABLE IF EXISTS capitulos CASCADE;                         -- B C I
DROP TABLE IF EXISTS reparto CASCADE;                           -- B C I
DROP TABLE IF EXISTS libros CASCADE;                            -- B C I
DROP TABLE IF EXISTS shows CASCADE;                             -- B C I
DROP TABLE IF EXISTS listaGeneros CASCADE;                      -- B C I
DROP TABLE IF EXISTS integrantes CASCADE;                       -- B C I
DROP TABLE IF EXISTS paises CASCADE;                            -- B C I
DROP TABLE IF EXISTS generos CASCADE;                           -- B C I
DROP TABLE IF EXISTS roles CASCADE;                             -- B C I
DROP TABLE IF EXISTS usuarioRol CASCADE;                        -- B C I
DROP TABLE IF EXISTS valoraciones CASCADE;                      -- B C I
DROP TABLE IF EXISTS usuarioSeguimiento;                        -- B C I
DROP TABLE IF EXISTS seguimiento;                               -- B C I

CREATE TABLE usuarioRol
(
        id          bigserial       PRIMARY KEY
    ,   nombre      VARCHAR(255)    NOT NUll UNIQUE
);

CREATE TABLE seguimiento
(
        id          bigserial       PRIMARY KEY
    ,   nombre      VARCHAR(255)    NOT NULL UNIQUE
);

CREATE TABLE paises
(
        id          bigserial       PRIMARY KEY
    ,   nombre      VARCHAR(255)    NOT NULL UNIQUE
);

CREATE TABLE usuarios
(
        id          bigserial       PRIMARY KEY
    ,   nickname    VARCHAR(255)    NOT NULL 
    ,   username    VARCHAR(255)    NOT NULL UNIQUE
    ,   correo      VARCHAR(255)    NOT NULL --UNIQUE
    ,   passwd      VARCHAR(255)    NOT NULL
    ,   auth_key    VARCHAR(255)
    ,   pais_id     bigint          REFERENCES paises (id)
    ,   rol_id      bigint          REFERENCES usuarioRol (id)
    ,   clave       VARCHAR(6)      
);

CREATE TABLE empresas
(
        id          bigserial       PRIMARY KEY
    ,   nombre      VARCHAR(255)    NOT NULL UNIQUE
    ,   pais_id     bigint          NOT NULL REFERENCES paises (id)
    ,   entidad_id  bigint          UNIQUE REFERENCES usuarios(id) 
);

CREATE TABLE integrantes
(
        id          bigserial       PRIMARY KEY
    ,   nombre      VARCHAR(255)    NOT NULL
    ,   biografia   text
    ,   fecha       date
);

CREATE TABLE roles
(
        id          bigserial       PRIMARY KEY
    ,   nombre      VARCHAR(255)    NOT NULL UNIQUE
);

CREATE TABLE generos
(
        id          bigserial       PRIMARY KEY
    ,   nombre      VARCHAR(255)    NOT NULL 
);

CREATE TABLE libros
(
        id              bigserial       PRIMARY KEY
    ,   nombre          VARCHAR(255)    NOT NULL UNIQUE
    ,   isbn            bigserial       UNIQUE
    ,   editorial_id    bigserial       NOT NULL REFERENCES empresas (id)
    ,   autor_id        bigserial       NOT NULL REFERENCES integrantes (id)
    ,   genero_id       bigserial       NOT NULL REFERENCES generos (id)
    ,   pais_id         bigserial       NOT NULL REFERENCES paises (id)
    ,   fecha           date
    ,   sinopsis        text
);

CREATE TABLE shows
(
        id              bigserial       PRIMARY KEY
    ,   nombre          VARCHAR(255)    NOT NULL UNIQUE
    ,   productora_id   bigserial       NOT NULL REFERENCES empresas (id)
    ,   tipo            VARCHAR(10)     NOT NULL
    ,   pais_id         bigserial       NOT NULL REFERENCES paises (id)
    ,   fecha           date
    ,   sinopsis        text 
);


CREATE TABLE capitulos
(
        id              bigserial       PRIMARY KEY
    ,   nombre          VARCHAR(255)    NOT NULL
    ,   sinopsis        text            NOT NULL
);

CREATE TABLE listaCapitulos
(
        id              bigserial       PRIMARY KEY
    ,   capitulo_id     bigint          NOT NULL REFERENCES capitulos (id)
    ,   objetos_id        bigint        NOT NULL REFERENCES shows (id)
    ,   temporada       bigserial       NOT NULL
);

CREATE TABLE listaGeneros
(
        id              bigserial       PRIMARY KEY
    ,   objetos_id      bigint          NOT NULL REFERENCES shows (id)
    ,   genero_id       bigint          NOT NULL REFERENCES generos (id)
);

CREATE TABLE reparto
(
        id              bigserial          PRIMARY KEY
    ,   objetos_id      bigserial       NOT NULL REFERENCES shows (id)
    ,   integrante_id   bigserial       NOT NULL REFERENCES integrantes (id)
    ,   rol_id          bigserial       NOT NULL REFERENCES roles (id)
);

CREATE TABLE valoraciones
(
        id              bigserial       PRIMARY KEY
    ,   objetos_id      bigint          NOT NULL REFERENCES shows(id)
    ,   user_id         bigint          NOT NULL REFERENCES usuarios (id)
    ,   valoracion      integer         NOT NULL
    ,   comentario      text
);

CREATE TABLE usuarioSeguimiento
(
        id              bigserial       PRIMARY KEY
    ,   objetos_id      bigint          NOT NULL REFERENCES shows(id)
    ,   user_id         bigint          NOT NULL REFERENCES usuarios (id)
    ,   seguimiento_id  bigint          NOT NULL REFERENCES seguimiento (id)

);

INSERT INTO usuarioRol (nombre)
VALUES  ('empresa')
    ,   ('cliente');

INSERT INTO seguimiento (nombre)
VALUES  ('siguiendo')
    ,   ('pendiente')
    ,   ('vista');

INSERT INTO paises (nombre) 
VALUES ('Afghanistan')
    ,  ('Åland Islands')
    ,  ('Albania')
    ,  ('Algeria')
    ,  ('American Samoa')
    ,  ('Andorra')
    ,  ('Angola')
    ,  ('Anguilla')
    ,  ('Antarctica')
    ,  ('Antigua & Barbuda')
    ,  ('Argentina')
    ,  ('Armenia')
    ,  ('Aruba')
    ,  ('Ascension Island')
    ,  ('Australia')
    ,  ('Austria')
    ,  ('Azerbaijan')
    ,  ('Bahamas')
    ,  ('Bahrain')
    ,  ('Bangladesh')
    ,  ('Barbados')
    ,  ('Belarus')
    ,  ('Belgium')
    ,  ('Belize')
    ,  ('Benin')
    ,  ('Bermuda')
    ,  ('Bhutan')
    ,  ('Bolivia')
    ,  ('Bosnia & Herzegovina')
    ,  ('Botswana')
    ,  ('Brazil')
    ,  ('British Indian Ocean Territory')
    ,  ('British Virgin Islands')
    ,  ('Brunei')
    ,  ('Bulgaria')
    ,  ('Burkina Faso')
    ,  ('Burundi')
    ,  ('Cambodia')
    ,  ('Cameroon')
    ,  ('Canada')
    ,  ('Canary Islands')
    ,  ('Cape Verde')
    ,  ('Caribbean Netherlands')
    ,  ('Cayman Islands')
    ,  ('Central African Republic')
    ,  ('Ceuta & Melilla')
    ,  ('Chad')
    ,  ('Chile')
    ,  ('China')
    ,  ('Christmas Island')
    ,  ('Cocos (Keeling) Islands')
    ,  ('Colombia')
    ,  ('Comoros')
    ,  ('Congo - Brazzaville')
    ,  ('Congo - Kinshasa')
    ,  ('Cook Islands')
    ,  ('Costa Rica')
    ,  ('Côte d’Ivoire')
    ,  ('Croatia')
    ,  ('Cuba')
    ,  ('Curaçao')
    ,  ('Cyprus')
    ,  ('Czechia')
    ,  ('Denmark')
    ,  ('Diego Garcia')
    ,  ('Djibouti')
    ,  ('Dominica')
    ,  ('Dominican Republic')
    ,  ('Ecuador')
    ,  ('Egypt')
    ,  ('El Salvador')
    ,  ('Equatorial Guinea')
    ,  ('Eritrea')
    ,  ('Estonia')
    ,  ('Eswatini')
    ,  ('Ethiopia')
    ,  ('Falkland Islands')
    ,  ('Faroe Islands')
    ,  ('Fiji')
    ,  ('Finland')
    ,  ('France')
    ,  ('French Guiana')
    ,  ('French Polynesia')
    ,  ('French Southern Territories')
    ,  ('Gabon')
    ,  ('Gambia')
    ,  ('Georgia')
    ,  ('Germany')
    ,  ('Ghana')
    ,  ('Gibraltar')
    ,  ('Greece')
    ,  ('Greenland')
    ,  ('Grenada')
    ,  ('Guadeloupe')
    ,  ('Guam')
    ,  ('Guatemala')
    ,  ('Guernsey')
    ,  ('Guinea')
    ,  ('Guinea-Bissau')
    ,  ('Guyana')
    ,  ('Haiti')
    ,  ('Honduras')
    ,  ('Hong Kong SAR China')
    ,  ('Hungary')
    ,  ('Iceland')
    ,  ('India')
    ,  ('Indonesia')
    ,  ('Iran')
    ,  ('Iraq')
    ,  ('Ireland')
    ,  ('Isle of Man')
    ,  ('Israel')
    ,  ('Italy')
    ,  ('Jamaica')
    ,  ('Japan')
    ,  ('Jersey')
    ,  ('Jordan')
    ,  ('Kazakhstan')
    ,  ('Kenya')
    ,  ('Kiribati')
    ,  ('Kosovo')
    ,  ('Kuwait')
    ,  ('Kyrgyzstan')
    ,  ('Laos')
    ,  ('Latvia')
    ,  ('Lebanon')
    ,  ('Lesotho')
    ,  ('Liberia')
    ,  ('Libya')
    ,  ('Liechtenstein')
    ,  ('Lithuania')
    ,  ('Luxembourg')
    ,  ('Macao SAR China')
    ,  ('Madagascar')
    ,  ('Malawi')
    ,  ('Malaysia')
    ,  ('Maldives')
    ,  ('Mali')
    ,  ('Malta')
    ,  ('Marshall Islands')
    ,  ('Martinique')
    ,  ('Mauritania')
    ,  ('Mauritius')
    ,  ('Mayotte')
    ,  ('Mexico')
    ,  ('Micronesia')
    ,  ('Moldova')
    ,  ('Monaco')
    ,  ('Mongolia')
    ,  ('Montenegro')
    ,  ('Montserrat')
    ,  ('Morocco')
    ,  ('Mozambique')
    ,  ('Myanmar (Burma)')
    ,  ('Namibia')
    ,  ('Nauru')
    ,  ('Nepal')
    ,  ('Netherlands')
    ,  ('New Caledonia')
    ,  ('New Zealand')
    ,  ('Nicaragua')
    ,  ('Niger')
    ,  ('Nigeria')
    ,  ('Niue')
    ,  ('Norfolk Island')
    ,  ('North Korea')
    ,  ('North Macedonia')
    ,  ('Northern Mariana Islands')
    ,  ('Norway')
    ,  ('Oman')
    ,  ('Pakistan')
    ,  ('Palau')
    ,  ('Palestinian Territories')
    ,  ('Panama')
    ,  ('Papua New Guinea')
    ,  ('Paraguay')
    ,  ('Peru')
    ,  ('Philippines')
    ,  ('Pitcairn Islands')
    ,  ('Poland')
    ,  ('Portugal')
    ,  ('Pseudo-Accents')
    ,  ('Pseudo-Bidi')
    ,  ('Puerto Rico')
    ,  ('Qatar')
    ,  ('Réunion')
    ,  ('Romania')
    ,  ('Russia')
    ,  ('Rwanda')
    ,  ('Samoa')
    ,  ('San Marino')
    ,  ('São Tomé & Príncipe')
    ,  ('Saudi Arabia')
    ,  ('Senegal')
    ,  ('Serbia')
    ,  ('Seychelles')
    ,  ('Sierra Leone')
    ,  ('Singapore')
    ,  ('Sint Maarten')
    ,  ('Slovakia')
    ,  ('Slovenia')
    ,  ('Solomon Islands')
    ,  ('Somalia')
    ,  ('South Africa')
    ,  ('South Georgia & South Sandwich Islands')
    ,  ('South Korea')
    ,  ('South Sudan')
    ,  ('Spain')
    ,  ('Sri Lanka')
    ,  ('St. Barthélemy')
    ,  ('St. Helena')
    ,  ('St. Kitts & Nevis')
    ,  ('St. Lucia')
    ,  ('St. Martin')
    ,  ('St. Pierre & Miquelon')
    ,  ('St. Vincent & Grenadines')
    ,  ('Sudan')
    ,  ('Suriname')
    ,  ('Svalbard & Jan Mayen')
    ,  ('Sweden')
    ,  ('Switzerland')
    ,  ('Syria')
    ,  ('Taiwan')
    ,  ('Tajikistan')
    ,  ('Tanzania')
    ,  ('Thailand')
    ,  ('Timor-Leste')
    ,  ('Togo')
    ,  ('Tokelau')
    ,  ('Tonga')
    ,  ('Trinidad & Tobago')
    ,  ('Tristan da Cunha')
    ,  ('Tunisia')
    ,  ('Turkey')
    ,  ('Turkmenistan')
    ,  ('Turks & Caicos Islands')
    ,  ('Tuvalu')
    ,  ('U.S. Outlying Islands')
    ,  ('U.S. Virgin Islands')
    ,  ('Uganda')
    ,  ('Ukraine')
    ,  ('United Arab Emirates')
    ,  ('United Kingdom')
    ,  ('United States')
    ,  ('Uruguay')
    ,  ('Uzbekistan')
    ,  ('Vanuatu')
    ,  ('Vatican City')
    ,  ('Venezuela')
    ,  ('Vietnam')
    ,  ('Wallis & Futuna')
    ,  ('Western Sahara')
    ,  ('Yemen')
    ,  ('Zambia')
    ,  ('Zimbabwe');

INSERT INTO usuarios(nickname, username, correo, passwd, pais_id)
VALUES  ('Lunargenta', 'diego', 'diego.hilderink@iesdonana.org', crypt('Altair1995', gen_salt('bf', 11)) ,208);

INSERT INTO empresas (nombre, pais_id)
VALUES  ('Warner Bros', 244)
    ,   ('Walt Disney', 244)
    ,   ('LucasFilm', 244)
    ,   ('HBO', 244)
    ,   ('Booket', 244)
    ,   ('Punto de lectura', 208)
    ,   ('Principal', 244);
    
INSERT INTO empresas (nombre, pais_id, entidad_id)
VALUES  ('Netflix', 244, 1);

INSERT INTO integrantes(nombre, biografia)
VALUES  ('Christopher Nolan', '')           
    ,   ('David S. Goyer', '')              
    ,   ('Jonathan Nolan', '')              
    ,   ('Christian Bale', '')
    ,   ('Heath Ledger', '')
    ,   ('Aaron Eckhart', '')
    ,   ('Michael Caine', '')
    ,   ('Gary Oldman', '')
    ,   ('Morgan Freeman', '')
    ,   ('Maggie Gyllenhaal', '')
    ,   ('Eric Roberts', '')
    ,   ('Cillian Murphy', '')
    ,   ('Chin Han', '')
    ,   ('Michael Jai White', '')
    ,   ('William Fichtner', '')
    ,   ('Monique Gabriela Curnen', '')
    ,   ('Nestor Carbonell', '')
    ,   ('Ritchie Coster', '')
    ,   ('Keith Szarabajka', '')
    ,   ('Colin McFarlane', '')
    ,   ('Joshua Harto', '')
    ,   ('Melinda McGraw', '')
    ,   ('Ron Dean', '')
    ,   ('Nathan Gamble', '')
    ,   ('Tommy Lister', '')
    ,   ('David Dastmalchian', '')
    ,   ('Gore Verbinski', '')
    ,   ('Ted Elliott', '')
    ,   ('Terry Rossio', '')
    ,   ('Johnny Depp', '')
    ,   ('Orlando Bloom', '')
    ,   ('Geoffrey Rush', '')
    ,   ('Keira Knightley', '')
    ,   ('Jack Davenport', '')
    ,   ('Kevin McNally', '')
    ,   ('Jonathan Pryce', '')
    ,   ('Mackenzie Crook', '')
    ,   ('Lee Arenberg', '')
    ,   ('Zoe Saldana', '')
    ,   ('Giles New', '')
    ,   ('Angus Barnett', '')
    ,   ('Damian O´Hare', '')
    ,   ('Michael Berry', '')
    ,   ('Isaac C. Singleton', '')
    ,   ('Treva Etienne', '')
    ,   ('Lucinda Dryzek', '')
    ,   ('Hugh Jackman', '')
    ,   ('Scarlett Johansson', '')
    ,   ('David Bowie', '')
    ,   ('Piper Perabo', '')
    ,   ('Andy Serkis', '')
    ,   ('Rebecca Hall', '')
    ,   ('Ricky Jay', '')
    ,   ('Ron Perkins', '')
    ,   ('Samantha Mahurin', '')
    ,   ('Daniel Davis', '')
    ,   ('Jim Piddock', '')
    ,   ('Christopher Neame', '')
    ,   ('Mark Ryan', '')
    ,   ('Roger Rees', '')
    ,   ('Jamie Harris', '')
    ,   ('George Lucas', '')
    ,   ('Hayden Christensen', '')
    ,   ('Geroge Lucas', '')
    ,   ('Ewan McGregor', '')
    ,   ('Natalie Portman', '')
    ,   ('Ian McDiarmid', '')
    ,   ('Samuel L. Jackson', '')
    ,   ('Jimmy Smits', '')
    ,   ('Anthony Daniels', '')
    ,   ('Kenny Baker', '')
    ,   ('Frank Oz', '')
    ,   ('Christopher Lee', '')
    ,   ('Peter Mayhew', '')
    ,   ('Silas Carson', '')
    ,   ('Keisha Castle-Hughes', '')
    ,   ('Temuera Morrison', '')
    ,   ('Trisha Noble', '')
    ,   ('Bruce Spence', '')
    ,   ('Ahmed Best', '')
    ,   ('Joel Edgerton', '')
    ,   ('Andrew Adamson', '')
    ,   ('Ann Peacock', '')
    ,   ('Christopher Markus', '')
    ,   ('Georgie Henley', '')
    ,   ('William Moseley', '')
    ,   ('Skandar Keynes', '')
    ,   ('Anna Popplewell', '')
    ,   ('Tilda Swinton', '')
    ,   ('Rupert Everett', '')
    ,   ('Dawn French', '')
    ,   ('James McAvoy', '')
    ,   ('Shane Rangi', '')
    ,   ('Patrick Kake', '')
    ,   ('Elizabeth Hawthorne', '')
    ,   ('Kiran Shah', '')
    ,   ('James Cosmo', '')
    ,   ('Judy McIntosh', '')
    ,   ('Jim Broadbent', '')
    ,   ('Stephen Ure', '')
    ,   ('Ray Winstone', '')
    ,   ('Liam Neeson', '')
    ,   ('Michael Mann', '')
    ,   ('Robert De Niro', '')
    ,   ('Al Pacino', '')
    ,   ('Val Kilmer', '')
    ,   ('Jon Voight', '')
    ,   ('Tom Sizemore', '')
    ,   ('Ashley Judd', '')
    ,   ('Diane Venora', '')
    ,   ('Amy Brenneman', '')
    ,   ('Mykelti Williamson', '')
    ,   ('Wes Studi', '')
    ,   ('Ted Levine', '')
    ,   ('Dennis Haysbert', '')
    ,   ('Tom Noonan', '')
    ,   ('Kevin Gage', '')
    ,   ('Hank Azaria', '')
    ,   ('Danny Trejo', '')
    ,   ('Jeremy Piven', '')
    ,   ('Pete Docter', '')
    ,   ('Bob Peterson', '')
    ,   ('Edward Zwick', '')
    ,   ('John Logan', '')
    ,   ('Marshall Herskovitz', '')
    ,   ('Tom Cruise', '')
    ,   ('Ken Watanabe', '')
    ,   ('Billy Connolly', '')
    ,   ('Tony Goldwyn', '')
    ,   ('Timothy Spall', '')
    ,   ('Koyuki', '')
    ,   ('Masato Harada', '')
    ,   ('Togo Igawa', '')
    ,   ('William Atherton', '')
    ,   ('Seizo Fukumoto', '')
    ,   ('Scott Wilson', '')
    ,   ('Shun Sugata', '')
    ,   ('Hiroyuki Sanada', '')
    ,   ('Shin Koyamada', '')
    ,   ('Masashi Odate', '')
    ,   ('Melissa Rosenberg', '')
    ,   ('Simon Cellan Jones', '')
    ,   ('S.J. Clarkson', '')
    ,   ('David Petrarca', '')
    ,   ('Stephen Surjik', '')
    ,   ('Uta Briesewitz', '')
    ,   ('John Dahl', '')
    ,   ('Billy Gierhart', '')
    ,   ('Rosemary Rodriguez', '')
    ,   ('Michael Rymer', '')
    ,   ('Jennifer Lynch', '')
    ,   ('Tim Iacofano', '')
    ,   ('Neasa Hardiman', '')
    ,   ('Brian Michael Bendis', '')
    ,   ('Michael Gaydos', '')
    ,   ('Jenna Reback', '')
    ,   ('Dana Baratta', '')
    ,   ('Krysten Ritter', '')
    ,   ('David Tennant', '')
    ,   ('Rachael Taylor', '')
    ,   ('Mike Colter', '')
    ,   ('Carrie-Anne Moss', '')
    ,   ('Erin Moriarty', '')
    ,   ('Wil Traval', '')
    ,   ('Ryan Farrell', '')
    ,   ('Susie Abromeit', '')
    ,   ('Eka Darville', '')
    ,   ('Robin Weigert', '')
    ,   ('Paul Pryce', '')
    ,   ('Michael Siberry', '')
    ,   ('Colby Minifie', '')
    ,   ('Nichole Yannetty', '')
    ,   ('Rebecca De Mornay', '')
    ,   ('Lisa Emery', '')
    ,   ('Clarke Peters', '')
    ,   ('Gillian Glasco', '')
    ,   ('Danielle Ferland', '')
    ,   ('Rosario Dawson', '')
    ,   ('Elizabeth Cappuccino', '')
    ,   ('Kieran Mulcare', '')
    ,   ('Catherine Blades', '')
    ,   ('Ruibo Qian', '')
    ,   ('Alexis Wolfe', '')
    ,   ('James Freedson-Jackson', '')
    ,   ('Jamie Neumann', '')
    ,   ('Lauren Schmidt', '')
    ,   ('Alik Sakharov', '')
    ,   ('Charlotte Brändström', '')
    ,   ('Alex Garcia Lopez', '')
    ,   ('Marc Jobst', '')
    ,   ('Henry Cavill', '')
    ,   ('Freya Allan', '')
    ,   ('Millie Brady', '')
    ,   ('MyAnna Buring', '')
    ,   ('Anya Chalotra', '')
    ,   ('Björn Hlynur Haraldsson', '')
    ,   ('Adam Levy', '')
    ,   ('Jodhi May', '')
    ,   ('Mimi Ndiweni', '')
    ,   ('Therica Wilson-Read', '')
    ,   ('Eamon Farren', '')
    ,   ('Joey Batey', '')
    ,   ('Lars Mikkelsen', '')
    ,   ('Royce Pierreson', '')
    ,   ('Maciej Musial', '')
    ,   ('Wilson Radjou-Pujalte', '')
    ,   ('Anna Shaffer', '')
    ,   ('Rebecca Benson', '')
    ,   ('Shane Attwooll', '')
    ,   ('Luke Neal', '')
    ,   ('Matthew Neal', '')
    ,   ('Tobi Bamtefa', '')
    ,   ('Roderick Hill', '')
    ,   ('Inge Beckmann', '')
    ,   ('Natasha Culzac', '')
    ,   ('Amit Shah', '')
    ,   ('Tom Canton', '')
    ,   ('Yasen Atour', '')
    ,   ('Agnes Bjorn', '')
    ,   ('Paul Bullion', '')
    ,   ('Kristofer Hivju', '')
    ,   ('Thue Ersted Rasmussen', '')
    ,   ('Aisha Fabienne Ross', '')
    ,   ('Mecia Simson', '')
    ,   ('Judit Fekete', '')
    ,   ('Imogen Daines', '')
    ,   ('Shaun Dooley', '')
    ,   ('Mahesh Jadu', '')
    ,   ('Anita Olatunji', '')
    ,   ('Kembe Sorel', '')
    ,   ('Raquel Amegashie', '')
    ,   ('Martin Angerbauer', '')
    ,   ('Joachim Paul Assböck', '')
    ,   ('Katia Bokor', '')
    ,   ('Callum Coates', '')
    ,   ('Bart Edwards', '')
    ,   ('Lucas Englander', '')
    ,   ('Máté Haumann', '')
    ,   ('Michael Keane', '')
    ,   ('Sam Marks', '')
    ,   ('Mya-Lecia Naylor', '')
    ,   ('Adele Oni', '')
    ,   ('Lila Prideaux', '')
    ,   ('Jordan Renzo', '')
    ,   ('Roger Ringrose', '')
    ,   ('Philippe Spall', '')
    ,   ('Alexandra Szucs', '')
    ,   ('Colette Tchantcho', '')
    ,   ('Jason Thorpe', '')
    ,   ('Gudmundur Thorvaldsson', '')
    ,   ('Richard van Weyden', '')
    ,   ('Veronika Varga', '')
    ,   ('Steve Wall', '')
    ,   ('Ben Wiggins', '')
    ,   ('Scott Alexander Young', '')
    ,   ('Attila Árpa', '')
    ,   ('Blair Kincaid', '')
    ,   ('Packy Lee', '')
    ,   ('David Simon', '')
    ,   ('Ed Burns', '')
    ,   ('Joy Kecken', '')
    ,   ('Rafael Álvarez', '')
    ,   ('Chris Collins', '')
    ,   ('George Pelecanos', '')
    ,   ('Richard Price', '')
    ,   ('Dennis Lehane', '')
    ,   ('David Mills', '')
    ,   ('William F. Zorzi', '')
    ,   ('Eric Overmyer', '')
    ,   ('Dominic West', '')
    ,   ('Lance Reddick', '')
    ,   ('Sonja Sohn', '')
    ,   ('Aidan Gillen', '')
    ,   ('Wendell Pierce', '')
    ,   ('Andre Royo', '')
    ,   ('Idris Elba', '')
    ,   ('Michael Kenneth Williams', '')
    ,   ('Domenick Lombardozzi', '')
    ,   ('Seth Gilliam', '')
    ,   ('J.D. Williams', '')
    ,   ('Jim True-Frost', '')
    ,   ('Wood Harris', '')
    ,   ('John Doman', '')
    ,   ('Deirdre Lovejoy', '')
    ,   ('Delaney Williams', '')
    ,   ('Jamie Hector', '')
    ,   ('Robert Wisdom', '')
    ,   ('Frankie Faison', '')
    ,   ('Corey Parker Robinson', '')
    ,   ('Chad Coleman', '')
    ,   ('Chris Bauer', '')
    ,   ('Amy Ryan', '')
    ,   ('Isiah Whitlock Jr.', '')
    ,   ('Felicia Pearson', '')
    ,   ('Robert F. Chew', '')
    ,   ('Gbenga Akinnagbe', '')
    ,   ('Tristan Wilds', '')
    ,   ('Jermaine Crawford', '')
    ,   ('Julito McCullum', '')
    ,   ('Maestro Harrell', '')
    ,   ('Larry Gilliard Jr.', '')
    ,   ('Pablo Schreiber', '')
    ,   ('James Ransone', '')
    ,   ('Anwan Glover', '')
    ,   ('Tray Chaney', '')
    ,   ('Michael Kostroff', '')
    ,   ('Clark Johnson', '')
    ,   ('Michael B. Jordan', '')
    ,   ('Luis Soravilla', 'Ingeniero industrial y licenciado cum laude en Humanidades. También se ha formado en el ámbito de la comunicación empresaria, en el mundo editorial, en energía y medio ambiente. Actualmente, es lector profesional y colabora en otras tareas de edición con algunas editoriales.')
    ,   ('Santiago Posteguillo', 'Santiago Posteguillo Gómez es un escritor español. Ha alcanzado la fama por varias novelas cuya trama transcurre en la antigua Roma. El 16 de octubre de 2018 fue galardonado con el Premio Planeta con su novela Yo, Julia.')
    ,   ('Arturo Pérez-Reverte', 'Arturo Pérez-Reverte Gutiérrez es un escritor y periodista español, miembro de la Real Academia Española desde 2003. Antiguo corresponsal de RTVE y reportero destacado en diversos conflictos armados y guerras, es el autor, entre otras, de la saga Las aventuras del capitán Alatriste.');

INSERT INTO roles(nombre)
VALUES  ('director')
    ,   ('actor')
    ,   ('guionista')
    ,   ('autor');


INSERT INTO generos(nombre)
VALUES  ('películas actuales')
    ,   ('películas antiguas')
    ,   ('estrenos')
    ,   ('clásicos')
    ,   ('mudas')
    ,   ('sonoras')
    ,   ('blanco y negro')
    ,   ('color')
    ,   ('animación')
    ,   ('romance')
    ,   ('fantástico')
    ,   ('aventuras')
    ,   ('cyberpunk')
    ,   ('steampunk')
    ,   ('intriga')
    ,   ('comedia')
    ,   ('drama')
    ,   ('acción')
    ,   ('terror')
    ,   ('musicales')
    ,   ('ciencia ficción')
    ,   ('bélicas')
    ,   ('documental')
    ,   ('oeste')
    ,   ('suspense')
    ,   ('infantil')
    ,   ('thriller')
    ,   ('serie Tv')
    ,   ('novela ciencia ficción')
    ,   ('novela histórica')
    ,   ('novela aventuras')
    ,   ('novela autoficción')
    ,   ('novela policíaca')
    ,   ('cuento de hadas')
    ,   ('relato moderno')
    ,   ('microrrelato')
    ,   ('escritura de aforismos')
    ,   ('épico')
    ,   ('lírico')
    ,   ('dramático')
    ,   ('didáctico')
    ,   ('ciencias humanas')
    ,   ('filosofía')
    ,   ('historia de la filosofía')
    ,   ('literatura')
    ,   ('narrativa de bolsillo');

INSERT INTO shows (nombre, productora_id, tipo, pais_id)
VALUES  ('El caballero oscuro', 1, 'cine', 244)                  --
    ,   ('Piratas del Caribe: La maldición de la perla negra', 2, 'cine', 244)                   --
    ,   ('El truco final', 1, 'cine', 244)                       
    ,   ('Star Wars La Venganza de los SITH', 3, 'cine', 244)
    ,   ('Las crónicas de Narnia: El león, la bruja y el armario', 2, 'cine', 244)
    ,   ('HEAT', 1, 'cine', 244)
    ,   ('UP', 2, 'cine',  244)
    ,   ('El último samurái', 1, 'cine', 244)
    ,   ('Jessica Jones', 8, 'serie',  244)
    ,   ('The Witcher', 4, 'serie',  244)
    ,   ('The wire', 5, 'serie', 244);

INSERT INTO libros (nombre, isbn, editorial_id, autor_id, genero_id, pais_id)
VALUES  ('Los asesinos del emperador', 9788408118329, 6, (select id from integrantes where nombre = 'Santiago Posteguillo'), (select id from generos where nombre = 'novela histórica'), 208)
    ,   ('Circo Máximo', 9788408141778, 6,  (select id from integrantes where nombre = 'Santiago Posteguillo'), (select id from generos where nombre = 'novela histórica') ,208)
    ,   ('Historia torcida de la Filosofía', 9788416223572, 8, (select id from integrantes where nombre = 'Luis Soravilla'), (select id from generos where nombre = 'historia de la filosofía'), 208)
    ,   ('Un día de cólera', 9788466323079, 7, (select id from integrantes where nombre = 'Arturo Pérez-Reverte'), (select id from generos where nombre = 'literatura'), 208);

INSERT INTO libros (nombre, isbn, editorial_id, autor_id, genero_id, pais_id, sinopsis)
VALUES  ('La Legión Perdida', 9788408176374, 6, (select id from integrantes where nombre = 'Santiago Posteguillo'),(select id from generos where nombre = 'novela histórica'), 208, 'En el año 53 a.C., el cónsul Craso cruzó el Éufrates para conquistar Oriente, pero su ejercito
        fue destrozado en Carrhae. Una legión entera cayó prisionera de los partos. Nadie sabe a ciencia cierta que pasó con aquella legión perdida.
        50 años después Trajano está a punto de volver a cruzar el Éufrates. Los partos esperan al otro lado. Las tropas de César dudan. Temen terminar
        como la legíon perdida. Pero Trajano no tiene miedo y emprende la mayor campaña militar de Roma, hacia la victoria o hacia el desastre, Intrigas, 
        batallas, dos mujeres adolescentes, idiomas extraños, Roma, Partia, India, China, dos Césares y una emperatriz se entrecruzan en el mayor relato 
        épico del mundo antiguo.');



INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Christopher Nolan'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christopher Nolan'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'David S. Goyer'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jonathan Nolan'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christian Bale'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Heath Ledger'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Aaron Eckhart'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Caine'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Gary Oldman'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Morgan Freeman'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Maggie Gyllenhaal'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Eric Roberts'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Cillian Murphy'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Chin Han'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Jai White'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'William Fichtner'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Monique Gabriela Curnen'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Nestor Carbonell'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ritchie Coster'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Keith Szarabajka'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Colin McFarlane'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Joshua Harto'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Melinda McGraw'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ron Dean'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Nathan Gamble'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tommy Lister'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'David Dastmalchian'), (SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), 2);


INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Gore Verbinski'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ted Elliott'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Terry Rossio'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Johnny Depp'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Orlando Bloom'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Keira Knightley'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Geoffrey Rush'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jack Davenport'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Kevin McNally'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jonathan Pryce'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mackenzie Crook'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Lee Arenberg'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Zoe Saldana'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Giles New'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Angus Barnett'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Damian O´Hare'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Berry'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Isaac C. Singleton'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Treva Etienne'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Lucinda Dryzek'), (SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), 2);

INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Christopher Nolan'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christopher Nolan'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jonathan Nolan'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Hugh Jackman'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christian Bale'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Caine'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Scarlett Johansson'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'David Bowie'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Piper Perabo'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Andy Serkis'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rebecca Hall'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ricky Jay'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ron Perkins'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Samantha Mahurin'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Daniel Davis'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jim Piddock'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christopher Neame'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mark Ryan'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jamie Harris'), (SELECT id FROM shows WHERE nombre = 'El truco final'), 2);

INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Geroge Lucas'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Geroge Lucas'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Hayden Christensen'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ewan McGregor'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Natalie Portman'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ian McDiarmid'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Samuel L. Jackson'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jimmy Smits'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Anthony Daniels'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Kenny Baker'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Frank Oz'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christopher Lee'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christopher Lee'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Peter Mayhew'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Silas Carson'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Silas Carson'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Keisha Castle-Hughes'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Temuera Morrison'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Trisha Noble'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Bruce Spence'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ahmed Best'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Joel Edgerton'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'George Lucas'), (SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), 2);

INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Andrew Adamson'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ann Peacock'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Andrew Adamson'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Christopher Markus'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Georgie Henley'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'William Moseley'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Skandar Keynes'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Anna Popplewell'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tilda Swinton'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rupert Everett'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Dawn French'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'James McAvoy'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Shane Rangi'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Patrick Kake'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Elizabeth Hawthorne'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Kiran Shah'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'James Cosmo'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Judy McIntosh'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jim Broadbent'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Stephen Ure'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ray Winstone'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Liam Neeson'), (SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), 2);

INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Michael Mann'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Mann'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Robert De Niro'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Al Pacino'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Val Kilmer'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jon Voight'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tom Sizemore'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ashley Judd'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Diane Venora'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Amy Brenneman'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Natalie Portman'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mykelti Williamson'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'William Fichtner'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Wes Studi'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ted Levine'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Dennis Haysbert'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tom Noonan'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Kevin Gage'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Hank Azaria'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Danny Trejo'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jeremy Piven'), (SELECT id FROM shows WHERE nombre = 'HEAT'), 2);

INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Pete Docter'), (SELECT id FROM shows WHERE nombre = 'UP'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Bob Peterson'), (SELECT id FROM shows WHERE nombre = 'UP'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Pete Docter'), (SELECT id FROM shows WHERE nombre = 'UP'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Bob Peterson'), (SELECT id FROM shows WHERE nombre = 'UP'), 3);


INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Edward Zwick'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'John Logan'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Edward Zwick'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Marshall Herskovitz'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tom Cruise'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ken Watanabe'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Billy Connolly'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tony Goldwyn'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Timothy Spall'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Koyuki'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Masato Harada'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Togo Igawa'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'William Atherton'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Seizo Fukumoto'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Scott Wilson'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Shun Sugata'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Hiroyuki Sanada'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Shin Koyamada'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Masashi Odate'), (SELECT id FROM shows WHERE nombre = 'El último samurái'), 2);

INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Melissa Rosenberg'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Simon Cellan Jones'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'S.J. Clarkson'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'David Petrarca'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Stephen Surjik'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Uta Briesewitz'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'John Dahl'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Billy Gierhart'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rosemary Rodriguez'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Rymer'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jennifer Lynch'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tim Iacofano'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Neasa Hardiman'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Brian Michael Bendis'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Melissa Rosenberg'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Gaydos'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jenna Reback'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Dana Baratta'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Krysten Ritter'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'David Tennant'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rachael Taylor'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mike Colter'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Carrie-Anne Moss'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Erin Moriarty'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Wil Traval'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ryan Farrell'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Susie Abromeit'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Eka Darville'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Robin Weigert'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Paul Pryce'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Siberry'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Colby Minifie'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Nichole Yannetty'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rebecca De Mornay'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Lisa Emery'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Clarke Peters'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Gillian Glasco'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Danielle Ferland'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rosario Dawson'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Elizabeth Cappuccino'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Kieran Mulcare'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Catherine Blades'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ruibo Qian'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Alexis Wolfe'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'James Freedson-Jackson'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jamie Neumann'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 2);


INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'Lauren Schmidt'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Alik Sakharov'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Charlotte Brändström'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Alex Garcia Lopez'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Marc Jobst'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 1)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Henry Cavill'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Freya Allan'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Millie Brady'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'MyAnna Buring'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Anya Chalotra'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Björn Hlynur Haraldsson'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Adam Levy'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jodhi May'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mimi Ndiweni'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Therica Wilson-Read'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Eamon Farren'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Joey Batey'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Lars Mikkelsen'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Royce Pierreson'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Maciej Musial'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Wilson Radjou-Pujalte'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Anna Shaffer'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rebecca Benson'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Shane Attwooll'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Luke Neal'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Matthew Neal'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tobi Bamtefa'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Roderick Hill'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Inge Beckmann'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Natasha Culzac'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Amit Shah'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tom Canton'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Yasen Atour'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Agnes Bjorn'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Paul Bullion'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Kristofer Hivju'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Thue Ersted Rasmussen'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Aisha Fabienne Ross'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mecia Simson'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Judit Fekete'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Imogen Daines'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Shaun Dooley'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mahesh Jadu'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Anita Olatunji'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Kembe Sorel'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Raquel Amegashie'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Martin Angerbauer'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Joachim Paul Assböck'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Katia Bokor'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Callum Coates'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Bart Edwards'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Lucas Englander'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Máté Haumann'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Keane'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Sam Marks'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Mya-Lecia Naylor'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Adele Oni'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Lila Prideaux'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jordan Renzo'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Roger Ringrose'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Philippe Spall'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Alexandra Szucs'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Colette Tchantcho'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jason Thorpe'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Gudmundur Thorvaldsson'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Richard van Weyden'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Veronika Varga'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Steve Wall'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ben Wiggins'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Scott Alexander Young'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Attila Árpa'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Blair Kincaid'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Packy Lee'), (SELECT id FROM shows WHERE nombre = 'The Witcher'), 2);


INSERT INTO reparto(integrante_id, objetos_id, rol_id)
VALUES  ((SELECT id FROM integrantes WHERE nombre = 'David Simon'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Ed Burns'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Joy Kecken'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Rafael Álvarez'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Chris Collins'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'George Pelecanos'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Richard Price'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Dennis Lehane'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'David Mills'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'William F. Zorzi'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Eric Overmyer'), (SELECT id FROM shows WHERE nombre = 'The wire'), 3)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Dominic West'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Lance Reddick'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Sonja Sohn'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Clarke Peters'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Aidan Gillen'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Wendell Pierce'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Andre Royo'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Idris Elba'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Kenneth Williams'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Domenick Lombardozzi'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Seth Gilliam'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'J.D. Williams'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jim True-Frost'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Wood Harris'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'John Doman'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Deirdre Lovejoy'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Delaney Williams'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jamie Hector'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Robert Wisdom'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Frankie Faison'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Corey Parker Robinson'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Chad Coleman'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Chris Bauer'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Amy Ryan'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Isiah Whitlock Jr.'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Felicia Pearson'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Robert F. Chew'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Gbenga Akinnagbe'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tristan Wilds'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Jermaine Crawford'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Julito McCullum'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Maestro Harrell'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Larry Gilliard Jr.'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Pablo Schreiber'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'James Ransone'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Anwan Glover'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Tray Chaney'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael Kostroff'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Clark Johnson'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2)
    ,   ((SELECT id FROM integrantes WHERE nombre = 'Michael B. Jordan'), (SELECT id FROM shows WHERE nombre = 'The wire'), 2);


INSERT INTO capitulos(nombre, sinopsis)
VALUES  ('AKA Ladies Night', 'Jessica is hired to find a pretty NYU student who´s vanished, but it turns out to be more than a simple missing persons case.')
    ,   ('AKA Crush Syndrome', 'Jessica vows toprove Hope`s innocence, even thought it means tracking down a terrifying figure from her own past.')
    ,   ('AKA It`s called Whisky', 'It wont`t be easy to acquire or deploy, but Jessica thinks she´s found a weapon to use aganist Kilgrave. Luke and Jessica bond over their similarities.')
    ,   ('AKA 99 Friends', 'A new case demands attention as Jessica tries to find out who´s spying on her for Kilgrave. Trish´s radio show yields unexpected consequences.')
    ,   ('AKA The Sandwich Saved Me', 'Despite Jessica´s objections, Trish´s new friend Simpson gets involved in the hunt for Kilgrave. Jessica recalls a pivotal moment in her life.')
    ,   ('AKA You´re a Winner!', 'Luke hires Jessica to help him find someone who may have skipped town, but she fears he´ll learn too much about her history in the process.')
    ,   ('AKA Top Shelf Perverts', 'Malcom, Simpson and Trish go rogue to prevent Jessica from carrying out an extreme plan to outwit Kilgrave.')
    ,   ('AKA WWJD?', 'Jessica experiences a strange homecoming courtesy of Kilgrave. Hogarth´s conflict with her estranged wife reaches a tipping point.')
    ,   ('AKA Sin Bin', 'Just when Jessica has Kilgrave right where she wants him, Hogarth´s involvement complicates the situation. Details of Kilgrave´s past emerge.')
    ,   ('AKA 1,000 Cuts', 'A discovery has the potential to change the entire game -- if Jessica can refuse Kilgrave´s offer.')
    ,   ('AKA I´ve Got the Blues', 'Jessica searches morgues for clues. Trish goes all-out to keep Simpson from getting in Jessica´s way. Malcom has an epiphany.')
    ,   ('AKA Take a Bloody Number', 'The hunt for Kilgrave reunites Jessica with Luke. Trish receives some unexpected information about Simpson and Jessica.')
    ,   ('AKA Smile', 'Jessica and Luke get help from someone else in the neighborhood. Kilgrave gears up for a major test of powers against Jessica.')
    ,   ('The Target', '"... when it´s not your turn." - McNulty. During the trial of D´Angelo Barksdale, a mid-level dealer accused of murder, the prosecution´s star witness recants her testimony, resulting in a not guilty verdict. After the trial, Detective James "Jimmy" McNulty is taken to task for his indiscretion. Meanwhile, D´Angelo is free to return to work, but he soon discovers that he´s been demoted.')
    ,   ('The Detail','"You cannot lose if you do not play." - Marla Daniels The witness who testified against D´Angelo winds up being a murder case for "Bunk" Moreland. However, McNulty tells Bunk that since the victim testified against D´Angelo, this murder was probably ordered by Avon Barkdsdale. McNulty and Bunk pick up D´Angelo for questioning and convince him to write an "apology" to the victim´s family. Just as he´s about to start, D´Angelo´s attorney arrives and makes him leave. Meanwhile in "The Pit", Detective Greggs gets some inside information courtesy of Bubbles. New investigation team member Prez arrives with a heavy reputation of incompetence, which worries Lieutenant Daniels. Daniels´s concerns are supported when Prez teams up with Herc and Carver to make their own moves in the case by going to the projects to "bust heads" for information. Things backfire and a quasi riot ensues.')
    ,   ('The Buys','"The king stay the king." - D´Angelo After early morning "field interviews" conducted by Herc, Carver and Prez lead to a minor riot and bad publicity for the police, Daniels gets called in by the Deputy Commissioner. McNulty sends Mahone and Polk to the terrace to get a photo of Avon Barksdale. They come up short but soft- spoken Freamon comes through with an old photo from Barksdale´s boxing days. McNulty and Greggs visit FBI agent Fitzhugh to try and obtain some surveillance equipment. D´Angelo delivers the daily count to Stringer Bell who in turn, gives D´Angelo a bonus. Later, while Bodie and D´Angelo wait for the new supply to arrive, D´Angelo offers to get food. While he´s gone Bodie, Stinkum and the crew go to retrieve the new supply only renegade dealer Omar and his crew get there and steal the drugs for themselves. The next day D´Angelo gets chewed out by Wee Bey -- a Barksdale enforcer -- for not being around when the incident happened. After getting chided by his superiors, Lieutenant Daniels mobilizes the team to raid "The Pit". Bodie hits one of the detectives while getting arrested and the rest of the officers proceed to beat Bodie. McNulty secretly meets with agent Fitzhugh who tells him to watch out for Lieutenant Daniels -- who might be on the take.')
    ,   ('Old Cases','"It´s a thin line ´tween heaven and here." - Bubbles Bodie manages to slip through security and escape from lockup. Meanwhile Herc and Carver continue their renegade ways by travelling to Marlboro to find Bodie and beat him into giving up information on the case. Once they get there, Herc has a change of attitude after meeting Bodie´s grandmother. Furious at being robbed of his product during the "re-up", Avon Barksdale instructs Stinkum, Wee-Bey and Stringer to double the existing reward to anyone who eliminates Omar and his crew. When Bodie returns to the pit, he explains how no jail can hold him because he´s too tough. He further challenges D´Angelo´s mettle by implying that D´Angelo´s weak. D´Angelo responds by telling how he killed one of Avon Barksdale´s ex-girlfriends after she threatened to give Avon up to the police. AFter hearing this, Bodie becomes cautiously impressed. Sgt. Landsman tells Major Rawls that despite all the screw ups, McNulty´s tenacity and obsession with getting the job done usually results in closed cases and that the Major should probably cut McNulty some slack. Detective Freamon discovers D´Angelo´s pager number just when Greggs and McNulty figure out a cloned pager could be the advantage they need.')
    ,   ('The Pager', '"..a little slow, a little late." - Avon Barksdale Avon becomes more and more suspicious, he orders Wee-Bey to change phone lines in his apartment and promotes Stinkum to manage a new territory. He gets word that one of Omar´s crew members has been "got". Stringer Bell warns D´Angelo that a snitch may be in his camp. The detectives get their affidavit approved for a cloned pager but they are puzzled when the numbers they receive are not regular Baltimore phone numbers.. Herc and Carver catch up with Bodie and attempt to interrogate him.')
    ,   ('The Wire', '"..and all the pieces matter." - Freamon Brandon´s bloodied body is discovered in a lot that coincidentally is located next to Poot and Wallace´s home. Wallace in turn, reports this to D´Angelo, and tells him about how seeing Brandon´s boy has started to bother him. D´Angelo tells Wallace that he needs to get over it, but Wallace is still unsure about all he is involved in. Wallace gets even more unsettled about the situation after Avon rewards D´Angelo and him with extra cash for their parts in getting Brandon taken care of in the first place.')
    ,   ('One Arrest', '"A man must have a code." - Bunk Greggs, Herc, Carver, and Syndor grab the runner who is holding the re-up stash for the pit. Now that the cops have the stash, a furious Avon begins to question D´Angelo about a possible snitch in the pit. D´Angelo says it can´t be possible and he knows nothing of a snitch. Stringer tells D´Angelo and his crew they are to now use pay phones a block away and to not use the same phone twice. This in turn disconnects all the detective´s wiretaps they fought so long to get.')
    ,   ('Lessons', '"Come at the king, you best not miss." - Omar McNulty has his sons play the game of "front and follow" with Stringer Bell as the target at a local market, and the two get Bell´s license plate number. As a result, the two get Stringer´s license plate number and McNulty couldn´t be happier. Greggs and Carver bust a driver picking up a suspiciously large amount of cash from the Towers, only they are forced to return the money on orders of the Deputy Commissioner. Avon finds out about Orlando´s inquiries about branching out into "dirty" business, and makes it clear to Orlando that the plan will never happen.')
    ,   ('Game Day', '"Maybe we won." - Herc Freamon gets Syndor and Prez started on the Barksdale money trail. They discover the usual ties to dummy companies, but they also find large sums of political contributions. Herc and Carver bust Wee-Bey holding $22.000 but only $15,000 is reported. Lieutenant Daniels discovers the discrepancy and orders them to find the money before the morning roll call. Omar´s mission takes him to Proposition Joe where he promptly offers another recently stolen Barksdale stash to Joe in exchange for Avon´s pager number.')
    ,   ('The Cost', '"And then he dropped the bracelets..." -- Greggs After being clean for three days straight, Bubbles gets some strong advice from another former addict named Walon. He also gets a promise of extra help from Detective Greggs. When Omar´s murder attempt on Avon Barksdale fails, Stringer lays down some new laws for the Barksdale crew. There will be no phone use, no more money runs, a new pager number and anyone that needs to talk to Avon has to go through Stringer first. They also send a word to Omar that a truce will be offered to him. As the team goes through their setup of one of Barksdale´s people, one of the officers gets shot.')
    ,   ('The Hunt', '"Dope on the damn table." -- Daniels While Greggs´ life hangs in the balance, the officers deals with the shock in many different ways. Herc, Carver, and Syndor get back on the case after Freamon puts the incident into perspective. After seeing McNulty close to the breaking point, Rawls instructs him not to have any guilty over Gregg´s shooting because he´s not the one responsible. Daniels is ordered by the Deputy Commissioner to raid all the locations to appease the Commissioner´s desire for "dope on the table."')
    ,   ('Cleaning Up', '"This is me, yo, right here." -- Wallace After the Barksdale´s supply gets confiscated in another bust, Stringer gives more new rules to the crew. Avon and Stringer meet with Levy to discuss the next steps, which include the elimination of any and all persons that can connect Barksdale to the drugs. Wallace goes back to the pit and asks to be let back in but Stringer has another plan for Wallace. Stringer then asks Bodie to take Wallace´s old job.')
    ,   ('Sentencing', '"all in the game..." -- Traditional West Baltimore In the season finale, Greggs finds the strength to finger "Little Man" as one of the men who shot her. Daniels and McNulty go to the feds with crushing evidence about some Baltimore politicians tied to Barksdale, thinking they finally have him. However, the Feds only want the politiicans and not Barksdale. D´Angelo can´t swing a deal, and cops to a possession charge and 20 years hard time after a talk with his mother.');

INSERT INTO listaCapitulos(capitulo_id, objetos_id, temporada)
VALUES  ((SELECT id FROM capitulos WHERE nombre = 'AKA Ladies Night'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA Crush Syndrome'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA It`s called Whisky'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA 99 Friends'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA The Sandwich Saved Me'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA You´re a Winner!'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA Top Shelf Perverts'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA WWJD?'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA Sin Bin'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA 1,000 Cuts'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA I´ve Got the Blues'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA Take a Bloody Number'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'AKA Smile'), (SELECT id FROM shows WHERE nombre = 'Jessica Jones'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'The Target'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'The Detail'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'The Buys'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'Old Cases'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'The Pager'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'The Wire'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'One Arrest'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'Lessons'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'Game Day'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'The Cost'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'The Hunt'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'Cleaning Up'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1)
    ,   ((SELECT id FROM capitulos WHERE nombre = 'Sentencing'), (SELECT id FROM shows WHERE nombre = 'The wire'), 1);

INSERT INTO listaGeneros(objetos_id, genero_id)
VALUES  ((SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), (SELECT id FROM generos WHERE nombre = 'thriller'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), (SELECT id FROM generos WHERE nombre = 'acción'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El caballero oscuro'), (SELECT id FROM generos WHERE nombre = 'drama'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), (SELECT id FROM generos WHERE nombre = 'aventuras'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Piratas del Caribe: La maldición de la perla negra'), (SELECT id FROM generos WHERE nombre = 'fantástico'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El truco final'), (SELECT id FROM generos WHERE nombre = 'thriller'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El truco final'), (SELECT id FROM generos WHERE nombre = 'intriga'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El truco final'), (SELECT id FROM generos WHERE nombre = 'drama'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), (SELECT id FROM generos WHERE nombre = 'ciencia ficción'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Star Wars La Venganza de los SITH'), (SELECT id FROM generos WHERE nombre = 'aventuras'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), (SELECT id FROM generos WHERE nombre = 'fantástico'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Las crónicas de Narnia: El león, la bruja y el armario'), (SELECT id FROM generos WHERE nombre = 'aventuras'))
    ,   ((SELECT id FROM shows WHERE nombre = 'HEAT'), (SELECT id FROM generos WHERE nombre = 'thriller'))
    ,   ((SELECT id FROM shows WHERE nombre = 'HEAT'), (SELECT id FROM generos WHERE nombre = 'acción'))
    ,   ((SELECT id FROM shows WHERE nombre = 'HEAT'), (SELECT id FROM generos WHERE nombre = 'intriga'))
    ,   ((SELECT id FROM shows WHERE nombre = 'UP'), (SELECT id FROM generos WHERE nombre = 'animación'))
    ,   ((SELECT id FROM shows WHERE nombre = 'UP'), (SELECT id FROM generos WHERE nombre = 'aventuras'))
    ,   ((SELECT id FROM shows WHERE nombre = 'UP'), (SELECT id FROM generos WHERE nombre = 'comedia'))
    ,   ((SELECT id FROM shows WHERE nombre = 'UP'), (SELECT id FROM generos WHERE nombre = 'infantil'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El último samurái'), (SELECT id FROM generos WHERE nombre = 'aventuras'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El último samurái'), (SELECT id FROM generos WHERE nombre = 'acción'))
    ,   ((SELECT id FROM shows WHERE nombre = 'El último samurái'), (SELECT id FROM generos WHERE nombre = 'drama'));

INSERT INTO listaGeneros(objetos_id, genero_id)
VALUES  ((SELECT id FROM shows WHERE nombre = 'Jessica Jones'), (SELECT id FROM generos WHERE nombre = 'drama'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Jessica Jones'), (SELECT id FROM generos WHERE nombre = 'ciencia ficción'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Jessica Jones'), (SELECT id FROM generos WHERE nombre = 'acción'))
    ,   ((SELECT id FROM shows WHERE nombre = 'Jessica Jones'), (SELECT id FROM generos WHERE nombre = 'serie Tv'))
    ,   ((SELECT id FROM shows WHERE nombre = 'The wire'), (SELECT id FROM generos WHERE nombre = 'serie Tv'))
    ,   ((SELECT id FROM shows WHERE nombre = 'The wire'), (SELECT id FROM generos WHERE nombre = 'thriller'))
    ,   ((SELECT id FROM shows WHERE nombre = 'The wire'), (SELECT id FROM generos WHERE nombre = 'drama'))
    ,   ((SELECT id FROM shows WHERE nombre = 'The Witcher'), (SELECT id FROM generos WHERE nombre = 'serie Tv'))
    ,   ((SELECT id FROM shows WHERE nombre = 'The Witcher'), (SELECT id FROM generos WHERE nombre = 'fantástico'))
    ,   ((SELECT id FROM shows WHERE nombre = 'The Witcher'), (SELECT id FROM generos WHERE nombre = 'aventuras'));



    
